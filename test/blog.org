#+HTML_HEAD: <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
#+HTML_HEAD: <link href="https://cdn.bootcss.com/semantic-ui/2.2.6/semantic.min.css" rel="stylesheet">
#+HTML_HEAD: <link rel="stylesheet" href="https://pengwenbin7.github.io/static/css/blog.css">
#+HTML_HEAD: <script src="https://cdn.bootcss.com/jquery/3.1.1/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://pengwenbin7.github.io/static/js/blog.js"></script>
#+AUTHOR: [[mailto:pengwenbin7@126.com][pengwenbin7]]
#+TITLE: blog 示例

* 段落
在本章中，我会讲解如何自定义函数。由于Sheme是函数式编程语言，你需要通过编写小型函数来构造程序。
因此，明白如何构造并组合这些函数对掌握Scheme尤为关键。
在前端定义函数非常不便，因此我们通常需要在文本编辑器中编辑好代码，并在解释器中加载它们。
** 小节
在本章中，我会讲解如何自定义函数。由于Sheme是函数式编程语言，你需要通过编写小型函数来构造程序。
因此，明白如何构造并组合这些函数对掌握Scheme尤为关键。
在前端定义函数非常不便，因此我们通常需要在文本编辑器中编辑好代码，并在解释器中加载它们。
*** 小小节
在本章中，我会讲解如何自定义函数。由于Sheme是函数式编程语言，你需要通过编写小型函数来构造程序。
因此，明白如何构造并组合这些函数对掌握Scheme尤为关键。
在前端定义函数非常不便，因此我们通常需要在文本编辑器中编辑好代码，并在解释器中加载它们。
+ 列表1
+ 列表2
+ 列表3
+ 列表4


1. 列表1
2) 列表2
3. 列表3
4) 列表4

* 段落
在本章中，我会讲解如何自定义函数。由于Sheme是函数式编程语言，你需要通过编写小型函数来构造程序。
因此，明白如何构造并组合这些函数对掌握Scheme尤为关键。
在前端定义函数非常不便，因此我们通常需要在文本编辑器中编辑好代码，并在解释器中加载它们。
** 小节
在本章中，我会讲解如何自定义函数。由于Sheme是函数式编程语言，你需要通过编写小型函数来构造程序。
因此，明白如何构造并组合这些函数对掌握Scheme尤为关键。
在前端定义函数非常不便，因此我们通常需要在文本编辑器中编辑好代码，并在解释器中加载它们。
*** 小小节
在本章中，我会讲解如何自定义函数。由于Sheme是函数式编程语言，你需要通过编写小型函数来构造程序。
因此，明白如何构造并组合这些函数对掌握Scheme尤为关键。
在前端定义函数非常不便，因此我们通常需要在文本编辑器中编辑好代码，并在解释器中加载它们。
+ 列表1
+ 列表2
+ 列表3
+ 列表4


1. 列表1
2) 列表2
3. 列表3
4) 列表4

* 段落
在本章中，我会讲解如何自定义函数。由于Sheme是函数式编程语言，你需要通过编写小型函数来构造程序。
因此，明白如何构造并组合这些函数对掌握Scheme尤为关键。
在前端定义函数非常不便，因此我们通常需要在文本编辑器中编辑好代码，并在解释器中加载它们。
** 小节
在本章中，我会讲解如何自定义函数。由于Sheme是函数式编程语言，你需要通过编写小型函数来构造程序。
因此，明白如何构造并组合这些函数对掌握Scheme尤为关键。
在前端定义函数非常不便，因此我们通常需要在文本编辑器中编辑好代码，并在解释器中加载它们。
*** 小小节
在本章中，我会讲解如何自定义函数。由于Sheme是函数式编程语言，你需要通过编写小型函数来构造程序。
因此，明白如何构造并组合这些函数对掌握Scheme尤为关键。
在前端定义函数非常不便，因此我们通常需要在文本编辑器中编辑好代码，并在解释器中加载它们。
+ 列表1
+ 列表2
+ 列表3
+ 列表4


1. 列表1
2) 列表2
3. 列表3
4) 列表4
